{"ast":null,"code":"var _jsxFileName = \"/home/donkol/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/\\u041F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435/\\u043F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u044B \\u043D\\u0430 python/djanga/KosmoNews/kosmonews_react/src/Detail.js\",\n  _s = $RefreshSig$();\nimport Layout from \"./Layout\";\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Detail = () => {\n  _s();\n  const {\n    arg\n  } = useParams();\n  const [news, setNews] = useState({});\n  const [themes, setThemes] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(`http://127.0.0.1:8000/api/${arg}`);\n      const data = await response.json();\n      setNews(data);\n    };\n    fetchData();\n  }, [arg]);\n  useEffect(() => {\n    setThemes([[\"theme1\", \"Политика\"], [\"theme2\", \"Регионы\"], [\"theme3\", \"Инвестиции\"]]);\n  });\n  // Форматирование даты\n  const formatDate = date => {\n    let months = [\"января\", \"февраля\", \"марта\", \"апреля\", \"мая\", \"июня\", \"июля\", \"августа\", \"сентября\", \"октября\", \"ноября\", \"декабря\"];\n    let today = new Date(date);\n    let day = today.getDate();\n    let month = months[today.getMonth()];\n    let year = today.getFullYear();\n    let minutes = today.getMinutes();\n    let hours = today.getHours();\n    return `${hours}:${minutes}. ${day} ${month}`;\n  };\n  const themeList = Object.values(themes);\n  const formattedDate = formatDate(news.date); // Здесь news.date предполагается как строка даты\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    themes: themeList,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: news.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: themes[news.theme]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: formattedDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: news.article_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(Detail, \"fWlCt4A8BMqkcCxCUrU1/F57j2c=\", false, function () {\n  return [useParams];\n});\n_c = Detail;\nexport default Detail;\nvar _c;\n$RefreshReg$(_c, \"Detail\");","map":{"version":3,"names":["Layout","React","useState","useEffect","useParams","jsxDEV","_jsxDEV","Detail","_s","arg","news","setNews","themes","setThemes","fetchData","response","fetch","data","json","formatDate","date","months","today","Date","day","getDate","month","getMonth","year","getFullYear","minutes","getMinutes","hours","getHours","themeList","Object","values","formattedDate","children","title","fileName","_jsxFileName","lineNumber","columnNumber","theme","article_text","_c","$RefreshReg$"],"sources":["/home/donkol/Документы/Программирование/программы на python/djanga/KosmoNews/kosmonews_react/src/Detail.js"],"sourcesContent":["import Layout from \"./Layout\";\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst Detail = () => {\n  const { arg } = useParams();\n\n  const [news, setNews] = useState({});\n  const [themes, setThemes] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(`http://127.0.0.1:8000/api/${arg}`);\n      const data = await response.json();\n      setNews(data);\n    };\n\n    fetchData();\n  }, [arg]);\n  useEffect(() => {\n    setThemes([\n      [\"theme1\", \"Политика\"],\n      [\"theme2\", \"Регионы\"],\n      [\"theme3\", \"Инвестиции\"],\n    ]);\n  });\n  // Форматирование даты\n  const formatDate = (date) => {\n    let months = [\n      \"января\",\n      \"февраля\",\n      \"марта\",\n      \"апреля\",\n      \"мая\",\n      \"июня\",\n      \"июля\",\n      \"августа\",\n      \"сентября\",\n      \"октября\",\n      \"ноября\",\n      \"декабря\",\n    ];\n\n    let today = new Date(date);\n    let day = today.getDate();\n    let month = months[today.getMonth()];\n    let year = today.getFullYear();\n    let minutes = today.getMinutes();\n    let hours = today.getHours();\n\n    return `${hours}:${minutes}. ${day} ${month}`;\n  };\n\n  const themeList = Object.values(themes);\n  const formattedDate = formatDate(news.date); // Здесь news.date предполагается как строка даты\n\n  return (\n    <Layout themes={themeList}>\n      <div>\n        <h1>{news.title}</h1>\n        <h3>{themes[news.theme]}</h3>\n        <h4>{formattedDate}</h4>\n        <h2>{news.article_text}</h2>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Detail;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}