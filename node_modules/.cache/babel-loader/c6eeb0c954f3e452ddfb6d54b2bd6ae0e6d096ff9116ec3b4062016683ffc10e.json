{"ast":null,"code":"var _jsxFileName = \"/home/donkol/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/\\u041F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435/\\u043F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u044B \\u043D\\u0430 python/djanga/KosmoNews/kosmonews_react/src/Detail.js\",\n  _s = $RefreshSig$();\nimport Layout from \"./Layout\";\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Detail = () => {\n  _s();\n  const {\n    arg\n  } = useParams();\n  const [news, setNews] = useState({});\n  const [themes, setThemes] = useState([]);\n  useEffect(() => {\n    fetch(\"http://127.0.0.1:8000/api/16/\").then(response => response.json()).then(async data => {\n      setThemes(data);\n      const response = await fetch(`http://127.0.0.1:8000/api/17`);\n      const data_1 = await response.json();\n      setNews(data_1);\n    });\n  }, [arg]);\n\n  // Форматирование даты\n  const formatDate = date => {\n    let months = [\"января\", \"февраля\", \"марта\", \"апреля\", \"мая\", \"июня\", \"июля\", \"августа\", \"сентября\", \"октября\", \"ноября\", \"декабря\"];\n    let today = new Date(date);\n    let day = today.getDate();\n    let month = months[today.getMonth()];\n    let year = today.getFullYear();\n    let minutes = today.getMinutes();\n    let hours = today.getHours();\n    return `${hours}:${minutes}. ${day} ${month}`;\n  };\n  const themeList = Object.values(themes);\n  const formattedDate = formatDate(news.date); // Здесь news.date предполагается как строка даты\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    themes: themeList,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: news.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: themes[news.theme]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: formattedDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: news.article_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Detail, \"m3Y79yla17bYsrGdnTzsqPAT68M=\", false, function () {\n  return [useParams];\n});\n_c = Detail;\nexport default Detail;\nvar _c;\n$RefreshReg$(_c, \"Detail\");","map":{"version":3,"names":["Layout","React","useState","useEffect","useParams","jsxDEV","_jsxDEV","Detail","_s","arg","news","setNews","themes","setThemes","fetch","then","response","json","data","data_1","formatDate","date","months","today","Date","day","getDate","month","getMonth","year","getFullYear","minutes","getMinutes","hours","getHours","themeList","Object","values","formattedDate","children","title","fileName","_jsxFileName","lineNumber","columnNumber","theme","article_text","_c","$RefreshReg$"],"sources":["/home/donkol/Документы/Программирование/программы на python/djanga/KosmoNews/kosmonews_react/src/Detail.js"],"sourcesContent":["import Layout from \"./Layout\";\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst Detail = () => {\n  const { arg } = useParams();\n  const [news, setNews] = useState({});\n  const [themes, setThemes] = useState([]);\n\n  useEffect(() => {\n    fetch(\"http://127.0.0.1:8000/api/16/\")\n      .then((response) => response.json())\n      .then(async (data) => {\n        setThemes(data);\n        const response = await fetch(`http://127.0.0.1:8000/api/17`);\n        const data_1 = await response.json();\n        setNews(data_1);\n      });\n  }, [arg]);\n\n  // Форматирование даты\n  const formatDate = (date) => {\n    let months = [\n      \"января\",\n      \"февраля\",\n      \"марта\",\n      \"апреля\",\n      \"мая\",\n      \"июня\",\n      \"июля\",\n      \"августа\",\n      \"сентября\",\n      \"октября\",\n      \"ноября\",\n      \"декабря\",\n    ];\n\n    let today = new Date(date);\n    let day = today.getDate();\n    let month = months[today.getMonth()];\n    let year = today.getFullYear();\n    let minutes = today.getMinutes();\n    let hours = today.getHours();\n\n    return `${hours}:${minutes}. ${day} ${month}`;\n  };\n\n  const themeList = Object.values(themes);\n  const formattedDate = formatDate(news.date); // Здесь news.date предполагается как строка даты\n\n  return (\n    <Layout themes={themeList}>\n      <div>\n        <h1>{news.title}</h1>\n        <h3>{themes[news.theme]}</h3>\n        <h4>{formattedDate}</h4>\n        <h2>{news.article_text}</h2>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Detail;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}